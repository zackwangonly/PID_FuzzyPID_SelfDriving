#ifndef PID_H
#define PID_H
#include <vector>

enum Tunings {
    Manual,
    Twiddle,
    Adaptive
};

class PID {
public:
    ///* initially set to false, set to true in first call of ProcessMeasurement
    bool is_initialized_;

  /*
  * Errors
  */
  double p_error_;
  double i_error_;
  double d_error_;

  /*
  * Coefficients
  */ 
  double Kp_;
  double Ki_;
  double Kd_;

  ///* the control output generated by Integral control
  double i_output_;
  double max_i_output_;

  /*
   * Twiddle Parameters
   */
  Tunings flag_tuning;
  std::vector<double> dp;
  int step, param_index;
  // number of steps to allow changes to settle, then to evaluate error
  int n_settle_steps, n_eval_steps;
  double total_error, best_error;
  bool tried_adding, tried_subtracting, yes_i_wanna_twiddle;

  bool flag_adaptive;
  double adap_p_gain;
  double adap_i_gain;
  double adap_d_gain;
  double adap_sliding_gain;

  /*
  * Tune PID parameters by Twiddle Algorithm
  */
  //void TwiddleTuning(double cte);
  void AddToParameterAtIndex(int index, double amount);

  /*
  * Constructor
  */
  PID();

  /*
  * Destructor.
  */
  virtual ~PID();

  /*
  * Initialize PID.
  */
  void Init(double Kp, double Ki, double Kd, double Max_Output, Tunings Tuning_type);

  /*
  * Update the PID error variables given cross track error.
  */
  void UpdateError(double cte);

  /*
  * Calculate the total PID error.
  */
  double TotalError();
};

#endif /* PID_H */
